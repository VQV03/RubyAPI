require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/phones", type: :request do
  before(:each) do
    auth_headers = { "ACCEPT" => "application/vnd.api+json", "CONTENT_TYPE" => "application/vnd.api+json"}
    post auths_url, headers: auth_headers
    token_request = JSON.parse(response.body)
    @token = token_request["token"]
  end

  before(:each) do
    @customer = Customer.create(name: Faker::Name.name, email: Faker::Internet.email, birthdate: Faker::Date.between(from: 65.years.ago, to: 18.years.ago), cpf: Faker::IDNumber.brazilian_citizen_number(formatted: true), address: Faker::Address.full_address)
  end

  # This should return the minimal set of attributes required to create a valid
  # Phone. As you add validations to Phone, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      phone: Faker::PhoneNumber.cell_phone, 
      customer_id: 1
    }
  }

  let(:invalid_attributes) {
    {
      phone: "",
      customer_id: 1
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # PhonesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {
      "ACCEPT" => "application/vnd.api+json",
      "CONTENT_TYPE" => "application/vnd.api+json",
      "AUTHORIZATION" => "Bearer #{@token}"
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Phone.create! valid_attributes
      get phones_path, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      phone = Phone.create! valid_attributes
      get phones_path, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Phone" do
        expect {
          post phones_path,
               params: { phone: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Phone, :count).by(1)
      end

      it "renders a JSON response with the new phone" do
        post phones_path,
             params: { phone: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Phone" do
        expect {
          post phones_path,
               params: { phone: invalid_attributes }, as: :json
        }.to change(Phone, :count).by(0)
      end

      it "renders a JSON response with errors for the new phone" do
        post phones_path,
             params: { phone: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          phone: Faker::PhoneNumber.cell_phone,
          customer_id: 1
        }
      }

      it "updates the requested phone" do
        phone = Phone.create! valid_attributes
        patch phone_path(phone),
              params: { phone: new_attributes }, headers: valid_headers, as: :json
        phone.reload
      end

      it "renders a JSON response with the phone" do
        phone = Phone.create! valid_attributes
        patch phone_path(phone),
              params: { phone: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the phone" do
        phone = Phone.create! valid_attributes
        patch phone_path(phone),
              params: { phone: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/vnd.api+json"))
      end
    end
  end

  describe "DELETE /destroy" do

    it "destroys the requested phone" do
      phone = Phone.create! valid_attributes
      expect {
        delete phone_path(phone), headers: valid_headers, as: :json
      }.to change(Phone, :count).by(-1)
    end
  end
end
